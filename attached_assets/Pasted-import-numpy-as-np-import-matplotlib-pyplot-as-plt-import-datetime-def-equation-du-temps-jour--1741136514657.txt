import numpy as np
import matplotlib.pyplot as plt
import datetime

def equation_du_temps(jour):
    # Constantes pour l'équation exacte
    epsilon = np.radians(23.44)  # Inclinaison de l'axe terrestre
    L0 = np.radians(280.4665 + 0.9856474 * jour)  # Longitude moyenne du Soleil
    e = 0.0167086  # Excentricité de l'orbite terrestre
    C = np.radians((1.914602 - 0.004817 * jour / 365 - 0.000014 * (jour / 365)**2) * np.sin(L0) +
                   (0.019993 - 0.000101 * jour / 365) * np.sin(2 * L0) +
                   0.000289 * np.sin(3 * L0))  # Équation du centre
    Ls = L0 + C  # Longitude vraie du Soleil
    RA = np.arctan2(np.cos(epsilon) * np.sin(Ls), np.cos(Ls))  # Ascension droite du Soleil
    EOT = 4 * np.degrees(L0 - 0.0057183 - RA)  # Équation du temps en minutes
    return EOT

# Générer les valeurs pour l'année entière
jours = np.arange(1, 366)
eot_values = [equation_du_temps(j) for j in jours]

# Création des étiquettes des mois
mois_labels = ["Jan", "Fév", "Mar", "Avr", "Mai", "Juin", "Juil", "Août", "Sept", "Oct", "Nov", "Déc"]
mois_positions = [15, 46, 74, 105, 135, 166, 196, 227, 258, 288, 319, 349]

# Trouver les jours des maxima et minima
day_max = np.argmax(eot_values) + 1
day_min = np.argmin(eot_values) + 1
max_value = max(eot_values)
min_value = min(eot_values)

# Trouver les points d'inflexion (changement de direction)
inflection_days = [j for j in range(1, 364) if (eot_values[j-1] - eot_values[j]) * (eot_values[j] - eot_values[j+1]) < 0]
inflection_values = [eot_values[j] for j in inflection_days]

# Trouver les passages à zéro
zero_crossings = [j for j in range(1, 365) if eot_values[j-1] * eot_values[j] < 0]
zero_values = [eot_values[j] for j in zero_crossings]

# Convertir les jours en format jour/mois pour l'année 2025
inflection_dates = [datetime.datetime(2025, 1, 1) + datetime.timedelta(days=j-1) for j in inflection_days]
inflection_labels = [f"{date.day} {mois_labels[date.month-1]}" for date in inflection_dates]

zero_dates = [datetime.datetime(2025, 1, 1) + datetime.timedelta(days=j-1) for j in zero_crossings]
zero_labels = [f"{date.day} {mois_labels[date.month-1]}" for date in zero_dates]

# Affichage du graphique
plt.figure(figsize=(12, 6))
plt.plot(jours, eot_values, label="Équation du temps inversée", color='r')
plt.axhline(0, color='black', linewidth=0.5, linestyle='--')
plt.xticks(mois_positions, mois_labels)
plt.xlabel("Mois de l'année")
plt.ylabel("Équation du temps (minutes)")
plt.title("Équation du Temps Inversée pour un Cadran Solaire - Année 2025")
plt.legend()
plt.grid()

# Afficher les points des maxima et minima
plt.scatter([day_max, day_min], [max_value, min_value], color='blue', zorder=3)
plt.text(day_max, max_value, f"Max: {max_value:.1f} min", fontsize=10, verticalalignment='bottom', horizontalalignment='right', color='blue', fontweight='bold')
plt.text(day_min, min_value, f"Min: {min_value:.1f} min", fontsize=10, verticalalignment='top', horizontalalignment='right', color='blue', fontweight='bold')

# Afficher les points d'inflexion avec date et valeur
plt.scatter(inflection_days, inflection_values, color='green', zorder=3)
for i in range(len(inflection_days)):
    plt.text(inflection_days[i], inflection_values[i] + 0.5, f"{inflection_labels[i]}\n{inflection_values[i]:.1f} min", 
             fontsize=9, verticalalignment='bottom', horizontalalignment='center', color='green', fontweight='bold')

# Afficher les passages à zéro en rouge gras
plt.scatter(zero_crossings, zero_values, color='red', zorder=3)
for i in range(len(zero_crossings)):
    plt.text(zero_crossings[i], 0.5, f"{zero_labels[i]}", fontsize=10, verticalalignment='bottom', horizontalalignment='center', color='red', fontweight='bold')

plt.show()
